name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
    - uses: actions/checkout@v4


    - name: Get release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ steps.release_notes.outputs.version }}
        body: |
          ## What's New in ${{ steps.release_notes.outputs.version }}

          ### Downloads
          - **Linux:** `meetscribe-linux.tar.gz`
          - **macOS:** `meetscribe-macos.tar.gz`
          - **Windows:** `meetscribe-windows.zip`

          ### Installation
          1. Download the appropriate file for your operating system
          2. Extract the archive
          3. Run the `meetscribe` executable (or `meetscribe.exe` on Windows)

          ### Features
          - Standalone executable with no Python dependencies required
          - Global keyboard shortcuts for quick actions
          - Screenshot capture with clipboard integration
          - Configurable via TOML files
          - Cross-platform support

          For detailed usage instructions, see the [Quick Start Guide](docs/quick_start.md).
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ${{ matrix.os }}
    needs: create_release
    if: needs.create_release.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            asset_name: meetscribe-linux
            build_cmd: pyinstaller meetscribe.spec
            artifact_path: dist/meetscribe
          - os: macos-latest
            asset_name: meetscribe-macos
            build_cmd: python scripts/build_signed.py
            artifact_path: dist/meetscribe
          - os: windows-latest
            asset_name: meetscribe-windows.exe
            build_cmd: pyinstaller meetscribe.spec
            artifact_path: dist/meetscribe.exe

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Set up code signing (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        # Import code signing certificate if available
        if [ ! -z "${{ secrets.MACOS_CERTIFICATE }}" ]; then
          echo "üîê Setting up code signing certificate..."
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.MACOS_CERTIFICATE_PWD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.MACOS_CERTIFICATE_PWD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PWD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.MACOS_CERTIFICATE_PWD }}" build.keychain
          echo "CODESIGN_IDENTITY=${{ secrets.MACOS_CODESIGN_IDENTITY }}" >> $GITHUB_ENV
          echo "‚úÖ Code signing will be applied"
        else
          echo "üîì No code signing certificate available - building unsigned executable"
          echo "‚ö†Ô∏è  Users will see macOS security warnings when running the app"
          echo "üìñ See README.md for workarounds and code signing setup guide"
        fi

    - name: Debug working directory
      run: |
        echo "Current working directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Looking for meetscribe.spec:"
        find . -name "meetscribe.spec" -type f || echo "meetscribe.spec not found"
      shell: bash

    - name: Build release executable
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ] && [ -z "${{ secrets.MACOS_CERTIFICATE }}" ]; then
          echo "üî® Building macOS executable (unsigned)..."
          python scripts/build_signed.py --no-sign
        else
          echo "üî® Building executable..."
          ${{ matrix.build_cmd }}
        fi
      env:
        CODESIGN_IDENTITY: ${{ env.CODESIGN_IDENTITY }}

    - name: Create distribution archive
      working-directory: ${{ github.workspace }}
      run: |
        # Create a temporary directory for packaging
        mkdir -p release_dist
        cp ${{ matrix.artifact_path }} release_dist/
        cp config.toml release_dist/
        cd release_dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ../${{ matrix.asset_name }}.zip *
        else
          tar -czf ../${{ matrix.asset_name }}.tar.gz *
        fi
      shell: bash

    - name: Install GitHub CLI
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          choco install gh
        else
          # GitHub CLI is pre-installed on Ubuntu and macOS runners
          echo "GitHub CLI already available"
        fi

    - name: Upload release asset
      shell: bash
      run: |
        # Determine the correct archive file extension
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ARCHIVE_FILE="${{ matrix.asset_name }}.zip"
        else
          ARCHIVE_FILE="${{ matrix.asset_name }}.tar.gz"
        fi

        # Upload the asset using GitHub CLI
        echo "üì§ Uploading $ARCHIVE_FILE to release..."
        # Wait a moment for release to be fully created
        sleep 5
        # Retry upload up to 3 times in case of temporary issues
        for i in {1..3}; do
          if gh release upload ${{ github.ref_name }} "$ARCHIVE_FILE" --clobber; then
            echo "‚úÖ Successfully uploaded $ARCHIVE_FILE"
            break
          else
            echo "‚ùå Upload attempt $i failed, retrying..."
            if [ $i -eq 3 ]; then
              echo "‚ùå All upload attempts failed"
              exit 1
            fi
            sleep 10
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
