name: Lint and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Check template status
      id: template_check
      shell: bash
      run: |
        if grep -q "{{.*}}" pyproject.toml; then
          echo "is_template=true" >> $GITHUB_OUTPUT
          echo "ðŸ“‹ Running in TEMPLATE MODE - placeholders found"
        else
          echo "is_template=false" >> $GITHUB_OUTPUT
          echo "âœ… Running in INSTANTIATED MODE - no placeholders"
        fi
    - name: Install dependencies (instantiated mode)
      if: steps.template_check.outputs.is_template == 'false'
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]
    - name: Install dependencies (template mode)
      if: steps.template_check.outputs.is_template == 'true'
      run: |
        python -m pip install --upgrade pip
        # Install dev dependencies individually since package can't be installed with placeholders
        pip install ruff
    - name: Lint with ruff
      run: |
        # stop the build if there are Python syntax errors or undefined names
        ruff check . --select=E9,F --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        ruff check . --exit-zero --line-length=127 --statistics

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Check template status
      id: template_check
      shell: bash
      run: |
        if grep -q "{{.*}}" pyproject.toml; then
          echo "is_template=true" >> $GITHUB_OUTPUT
          echo "ðŸ“‹ Running in TEMPLATE MODE - placeholders found"
        else
          echo "is_template=false" >> $GITHUB_OUTPUT
          echo "âœ… Running in INSTANTIATED MODE - no placeholders"
        fi
    - name: Install dependencies (instantiated mode)
      if: steps.template_check.outputs.is_template == 'false'
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]
    - name: Install dependencies (template mode)
      if: steps.template_check.outputs.is_template == 'true'
      run: |
        python -m pip install --upgrade pip
        # Install dev dependencies individually since package can't be installed with placeholders
        pip install pytest
    - name: Test with pytest (instantiated mode)
      if: steps.template_check.outputs.is_template == 'false'
      run: |
        pytest
    - name: Test with pytest (template mode)
      if: steps.template_check.outputs.is_template == 'true'
      run: |
        python -m pytest --tb=short -v
      env:
        PYTHONPATH: ${{ github.workspace }}
